#!/bin/bash

# ebash's Functions and Variables

# Vars
__cwd="$(pwd)"
prgroot="$HOME/.ebash"

declare -A lists # For any lists your app may need as reference

# Config
__loadcfg() {
	local cfg="$prgroot/.cfg"
	# Write config variables below like so: name=$(cat "$cfg" | grep 'name' | cut -d '=' -f2)
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

# Funcs
__cfg() {
	local cfg="$prgroot/.cfg"
	while [[ -n "$1" ]]; do
		if [[ "$1" =~ '=' ]]; then
			local rule="$(echo "$1" | cut -d '=' -f1)"
			local oldvalue="$(cat "$cfg" | grep "$rule" | cut -d '=' -f2)"
			local newvalue="$(echo "$1" | cut -d '=' -f2)"
			sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" "$cfg"
			log "Updated rule $rule from $oldvalue to $newvalue!"
		elif [[ "$1" == 'list' ]]; then
			log "Current Settings:"
			cat "$cfg"
			return
		elif [[ "$1" == 'RESET' ]]; then
			__args --reset-cfg
		fi
		log "Rule: $(cat "$cfg" | grep ^$1$ || echo "No Rule Found!")"
	shift; done
}
# Set app states in the following format:
# states[name]=""
declare -A states
states[cfg]=""
states[proc]=""

# Add commands to the regex string below, separated by '|'
lists[cmds]="^(process|config|help|version)$"

error() { echo -e '\e[0;1;31m[ERROR]\e[0;0;0m '"$@" >&2; }
verbose() { [[ -n "$VERBOSE" ]] && echo -e '\e[0;1;35m[VERBOSE]\e[0;0;0m '"$@"; }
log() { echo -e '\e[0;1;32m[EBASH]\e[0;0;0m '"$@"; }

__args() {
	# Process args
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit 1
	while [[ -n "$1" ]]; do
		case "${1}" in
			-p | --process )
				shift
				[[ -z "$1" ]] && { error "Must supply a file to process!"; exit 1; }
				[[ ! -f "$1" ]] && { error "File not found: $1"; exit 1; }
				states[proc]=true
				states[file]="$PWD/$1"
				;;
			-C | --config )
				states[cfg]="t"
				;;
			--reset-cfg )
				log "Resetting ebash to default configuration..."
				cp -rf $(find "$HOME" -type d -name ebash 2>/dev/null | head -1)/.ebash "$HOME/" && echo "ebash's config has been reset!" || error "Failed to reset defaults!"
				exit;;
			# -V | --verbose )
			# 	VERBOSE=true
			#		;;
			-\? | --help )
				# Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			-v | --version )
				cat "$prgroot/version"
				exit;;
			* )
				# Catch-all
				if [[ "$1" =~ ${lists[cmds]} ]]; then
					__cmds "$1"
					return 0
				else
					cat "$prgroot/help" | head -1
					error "'$1' is not an argument!"
					exit 1
				fi
				;;
		esac
	shift; done
}
__cmds() {
	# Process commands
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit
	while [[ -n "$1" ]]; do
		case "${1,,}" in
			@(process) )
				shift
				[[ -z "$1" ]] && { error "Must supply a file to process!"; exit 1; }
				[[ ! -f "$1" ]] && { error "File not found: $1"; exit 1; }
				states[proc]=true
				states[file]="$PWD/$1"
				;;
			@(config) )
				states[cfg]="t"
				;;
			# @(verbose) )
			# 	VERBOSE=true
			# 	;;
			@(help) )
				cat "$prgroot/help"
				exit;;
			@(version) )
				cat "$prgroot/version"
				exit;;
			* )
				# Catch-all
				if [[ "$1" =~ ^- ]]; then
					__args "$1"
					return 0
				else
					verbose "Grepped command: '$(echo "${lists[cmds]}" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1")'"
					error "'$1' is not a command!"
					error "Did you mean to use '$(echo "${lists[cmds]}" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1")'?"
					exit
				fi
				;;
		esac
	shift; done
}
__short() {
	# Process short options
	states[file]="$1"
}
__proc2bash() {
	# Read file
	local genbash="$(cat "${states[file]}")"

	# Process extended syntaxes into bash equivalents
	verbose "First few lines: ""$(echo -E "$genbash" | head -8)"
	# genbash=$(echo -E "$genbash" | grep -E '["?[^.]*"?]+ [!]?== \{["?[^.]*"?]+\|["?[^.]*"?]+\}')
	verbose "Grep capture for \`X == {A|B}\`: $genbash"
	exit
	# Capture X == {A|B}; Replace with X == A || X == B
	# Steps:
	# 1. Capture X based on surrounding syntax
	# 2. Capture A and B separately
	# 3. Replace {A|B} with A || X == B (Adjusting '|' for '&' when necessary)
	# 4. Do this until the list within {} is complete (i.e. {A|B&C...})

	# Push generated bash to output file (same name minus extension)
	echo -E "$genbash" > "${states[file]/.ebsh/}"

	# Check to see if user wants to run the generated file
	[[ -n "${states[proc]}" ]] && {
		log "Processing complete!"
		log "File location: ${states[file]/.ebsh/}"
		exit
	} || {
		source "${states[file]/.ebsh/}"
		exit
	}
}
